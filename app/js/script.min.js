"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }
document.addEventListener("DOMContentLoaded", function () {
  var header = document.querySelector('.header');
  var main = document.querySelector('.main');

  // Получаем местоположение по https://ipapi.co/json
  var ipapi = fetch('https://ipapi.co/json', {
    method: 'GET'
  }).then(function (response) {
    return response.json();
  }).then(function (data) {
    return data;
  });

  // Ресайз страницы, если ширина экрана меньше 1140
  function resize() {
    if (window.innerWidth < 1140) {
      // Нужно в телефоне при разной размере экрана дать отступ для слайдера, чтобы поместилась форма
      var _mains = document.querySelectorAll('.main');
      if (_mains[0]) {
        _mains.forEach(function (main) {
          var form = main.querySelector('.main__form');
          if (window.innerWidth < 1140) {
            form.style.minHeight = form.scrollHeight + 'px';
            main.style.setProperty('--height-form', "".concat(form.scrollHeight, "px"));
          } else {
            main.style.removeProperty('--height-form');
            form.style.minHeight = '';
          }
        });
      }
    }
  }
  resize();
  window.addEventListener('resize', function () {
    resize();
  });

  // Слежение за скролл страницы
  window.addEventListener('scroll', function () {
    // Если больше 200 пикселей страница, показываем шапку
    if (window.scrollY > 200) {
      header.classList.add('fixed');
      main.classList.add('fixed');
    } else {
      header.classList.remove('fixed');
      main.classList.remove('fixed');
    }
  });
  var _countries = pPhones;
  function getOptionByCode(slug) {
    return _countries.find(function (country) {
      return country.countryCode.toLowerCase() === slug;
    });
  }

  // Главный экран - слайдер Swiper, документация https://swiperjs.com/swiper-api
  var mains = document.querySelectorAll('.main');
  if (mains[0]) {
    mains.forEach(function (main) {
      var _swiperElement = main.querySelector('.swiper');
      var _swiperPagination = main.querySelector(".swiper-pagination");

      // Следим за видимостью экрана, если видно запускаем автоплей слайдера иначе отключаем
      new IntersectionObserver(function (entries, observer) {
        if (entries[0].isIntersecting) {
          _swiper.autoplay.resume();
        } else {
          _swiper.autoplay.pause();
        }
      }).observe(_swiperElement);
      var _swiper = new Swiper(_swiperElement, {
        speed: _swiperElement.dataset.speed,
        spaceBetween: 10,
        autoplay: {
          delay: _swiperElement.dataset.autoplay,
          disableOnInteraction: false
        },
        pagination: {
          el: _swiperPagination,
          clickable: true
        },
        loop: true,
        rewind: true,
        breakpoints: {
          320: {
            allowTouchMove: true,
            autoHeight: 'auto'
          },
          1200: {
            allowTouchMove: false,
            autoHeight: false
          }
        },
        on: {
          afterInit: function afterInit(swiper) {
            _swiperPagination.style.setProperty('--count', swiper.pagination.bullets.length); // Передаем количество пагинаций
            main.querySelector('.main__nums-end').textContent = swiper.pagination.bullets.length < 10 ? '0' + swiper.pagination.bullets.length : swiper.pagination.bullets.length; // Общее количество слайдов
          },

          slideChange: function slideChange(swiper) {
            main.querySelector('.main__nums-start').textContent = swiper.realIndex + 1 < 10 ? '0' + (swiper.realIndex + 1) : swiper.realIndex + 1; // Показывает число нужного слайда
          }
        }
      });

      _swiper.autoplay.pause(); // Отключаем автоплей. Стоит слежение за видимостью экрана по необходимости запустит
    });
  }

  var interTels = document.querySelectorAll('.p-inter-tel');
  if (interTels[0]) {
    interTels.forEach(function (interTel) {
      var lang = interTel.querySelector('input[name="tel_lang"]');
      var slug = interTel.querySelector('input[name="tel_slug"]');
      var langUpper = lang.value.charAt(0).toUpperCase() + lang.value.slice(1);
      var number = interTel.querySelector('input[name="tel_number"]');
      var prefix = interTel.querySelector('.p-inter-tel__input-item span');
      var input = interTel.querySelector('.p-inter-tel__input-item input[type="tel"]');
      var button = interTel.querySelector('.p-inter-tel__select-block');
      var buttonFlag = button.querySelector('.fi');
      var options = interTel.querySelector('.p-inter-tel__options');
      var optionsUl = options.querySelector('ul');
      var optionsSearch = options.querySelector('input');
      function resetQuery() {
        _options.forEach(function (option) {
          option.classList.remove('hidden');
          optionsSearch.value = '';
        });
      }
      button.addEventListener('click', function () {
        if (interTel.classList.contains('active')) {
          resetQuery();
        }
        interTel.classList.toggle('active');
      });
      var _options = null;
      var _mask = IMask(input, {
        mask: input.placeholder,
        lazy: false
      });
      input._mask = _mask;
      var activeOptionToJson = getOptionByCode(slug.value);
      number.value = "+".concat(activeOptionToJson.phoneCode);
      prefix.textContent = "+".concat(activeOptionToJson.phoneCode);
      buttonFlag.className = "fi fi-".concat(activeOptionToJson.countryCode.toLowerCase());
      lang.value = "".concat(activeOptionToJson.countryCode.toLowerCase());
      input.placeholder = '';
      input.value = '';
      _mask.masked.reset();
      _mask.updateOptions({
        mask: activeOptionToJson.phoneMask
      });
      _countries.forEach(function (country) {
        var classes = slug.value === country.countryCode.toLowerCase() ? 'active' : '';
        var optionOutput = "\n                    <li class=\"p-inter-tel__option ".concat(classes, "\" data-country=\"").concat(country['name' + langUpper], "\" data-code=\"").concat(country.countryCode.toLowerCase(), "\">\n                      <div class=\"fi fi-").concat(country.countryCode.toLowerCase(), "\"></div>\n                      <div class=\"p-inter-tel__option-name\">").concat(country['name' + langUpper], "</div>\n                      <div class=\"p-inter-tel__option-num\">+").concat(country.phoneCode, "</div>\n                    </li>\n                ");
        optionsUl.insertAdjacentHTML('beforeend', optionOutput);
      });
      _options = optionsUl.querySelectorAll('.p-inter-tel__option');
      _options.forEach(function (option) {
        option.addEventListener('click', function () {
          var code = option.dataset.code;
          var activeOptionToJson = getOptionByCode(option.dataset.code);
          var num = activeOptionToJson.phoneCode;
          var mask = activeOptionToJson.phoneMask;
          console.log(mask);
          var activeOption = optionsUl.querySelector('.p-inter-tel__option.active');
          if (activeOption) {
            activeOption.classList.remove('active');
          }
          slug.value = code;
          number.value = num;
          prefix.textContent = "+".concat(num);
          buttonFlag.className = "fi fi-".concat(code);
          input.value = '';
          _mask.masked.reset();
          _mask.updateOptions({
            mask: mask,
            lazy: false
          });
          input.focus();
          option.classList.add('active');
          interTel.classList.remove('active');
          resetQuery();
        });
      });
      optionsSearch.addEventListener('input', function () {
        var search_query = optionsSearch.value.toLowerCase();
        _options.forEach(function (option) {
          var is_matched = option.dataset.country.toLowerCase().includes(search_query);
          is_matched ? option.classList.remove('hidden') : option.classList.add('hidden');
        });
      });
    });
  }

  // Получаем местоположение, проверяем если нужно учитывать местоположение и перебираем международный список телефонов, вставляется нужные данные
  ipapi.then(function (data) {
    var slug = data.country_code.toLowerCase();
    interTels.forEach(function (interTel) {
      var tel_number = interTel.querySelector('input[name="tel_number"]'); // Код номера
      var statusIp = interTel.querySelector('input[name="ip_status"]'); // Статус местоположение
      if (statusIp.value === 'true') {
        interTel.querySelector('input[name="tel_slug"]').value = slug; // Код страны

        var options = interTel.querySelector('.p-inter-tel__options');
        var optionsUl = options.querySelector('ul');
        var input = interTel.querySelector('.p-inter-tel__input-item input[type="tel"]');
        var _mask = input._mask;
        var button = interTel.querySelector('.p-inter-tel__select-block');
        var buttonFlag = button.querySelector('.fi');
        var prefix = interTel.querySelector('.p-inter-tel__input-item span');
        var option = optionsUl.querySelector('.p-inter-tel__option[data-code="' + slug + '"]');
        var activeOptionToJson = getOptionByCode(slug);
        if (option) {
          option.classList.add('active');
          input.value = '';
          buttonFlag.className = "fi fi-".concat(option.dataset.code);
          input._mask = _mask;
          tel_number.value = "".concat(activeOptionToJson.phoneCode);
          prefix.textContent = "+".concat(activeOptionToJson.phoneCode);
          _mask.masked.reset();
          _mask.updateOptions({
            mask: activeOptionToJson.phoneMask,
            lazy: false
          });
        }
      }
    });
  });

  // Список карточек - слайдер Swiper, документация https://swiperjs.com/swiper-api
  var cards = document.querySelectorAll('.cards');
  if (cards[0]) {
    cards.forEach(function (card) {
      var _swiperElement = card.querySelector('.swiper');
      var _swiperPagination = card.querySelector(".swiper-pagination");
      var _swiperScrollbar = card.querySelector(".swiper-scrollbar");
      var _swiper = new Swiper(_swiperElement, {
        speed: _swiperElement.dataset.speed,
        slidesPerView: 'auto',
        spaceBetween: 15,
        pagination: {
          el: _swiperPagination,
          clickable: true,
          type: 'custom',
          renderCustom: function renderCustom(swiper, current, total) {
            var start = current < 10 ? '0' + current : current;
            var end = total - 1 < 10 ? '0' + total : total;
            return "<span class=\"cards__nums-start\">".concat(start, "</span>/<span class=\"cards__nums-end\">").concat(end, "</span>");
          }
        },
        scrollbar: {
          el: _swiperScrollbar,
          draggable: true,
          snapOnRelease: true
        },
        navigation: {
          nextEl: card.querySelector(".swiper-button-next"),
          prevEl: card.querySelector(".swiper-button-prev")
        },
        breakpoints: {
          320: {
            allowTouchMove: true,
            spaceBetween: 5
          },
          768: {
            spaceBetween: 15,
            allowTouchMove: false
          }
        }
      });
    });
  }

  // Кастомный select
  var pSelects = document.querySelectorAll('.p-select');
  if (pSelects[0]) {
    pSelects.forEach(function (pSelect) {
      var input = pSelect.querySelector('.p-select__input');
      var btn = pSelect.querySelector('.p-select__btn');
      var current = btn.querySelector('.p-select__current'); // Выбранная опция
      var options = pSelect.querySelectorAll('.p-select__options .p-select__option'); // Список опций

      // Показываем список опции при клике
      btn.addEventListener('click', function () {
        pSelect.classList.toggle('active');
      });

      // Перебор опций и добавляем событие клика
      options.forEach(function (option) {
        option.addEventListener('click', function () {
          input.value = option.textContent;
          current.textContent = option.textContent;
          pSelect.classList.remove('active');
          btn.classList.add('active'); // Выделяем активную опцию - меняется цвет серого на нужный по классу
        });
      });
    });
  }

  // Плавная прокрутка ссылок по якорю через #id
  var anchors = document.querySelectorAll('a[href*="#"]');
  var _iterator = _createForOfIteratorHelper(anchors),
    _step;
  try {
    var _loop = function _loop() {
      var anchor = _step.value;
      anchor.addEventListener('click', function (e) {
        e.preventDefault();
        var blockID = anchor.getAttribute('href').substr(1);
        document.getElementById(blockID).scrollIntoView({
          behavior: 'smooth',
          block: 'start'
        });
      });
    };
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      _loop();
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  var forms = document.querySelectorAll('form');
  if (forms[0]) {
    forms.forEach(function (form) {
      form.addEventListener('submit', function (e) {
        resetEvent(e);
        e.stopImmediatePropagation();
        var status = false;
        var countInvalid = 0;
        var isValidForm = form.checkValidity();
        var pFormInputs = form.querySelectorAll('.p-form__input');
        if (pFormInputs[0]) {
          pFormInputs.forEach(function (pFormInput) {
            pFormInput.classList.remove('invalid', 'valid');
            if (pFormInput.classList.contains('p-form__input_single')) {
              var input = pFormInput.querySelector('input');
              if (!input.checkValidity()) {
                countInvalid = countInvalid + 1;
                pFormInput.classList.add('invalid');
              }
            } else if (pFormInput.classList.contains('p-form__input_checkbox')) {
              var _input = pFormInput.querySelector('input');
              if (!_input.checked) {
                countInvalid = countInvalid + 1;
                pFormInput.classList.add('invalid');
              }
            } else {
              var interTel = pFormInput.querySelector('.p-inter-tel');
              if (interTel) {
                var _input2 = interTel.querySelector('.p-inter-tel__input-item input[type="tel"]');
                if (_input2._mask.value.includes('_')) {
                  countInvalid = countInvalid + 1;
                  pFormInput.classList.add('invalid');
                }
              }
              var pSelect = pFormInput.querySelector('.p-select');
              if (pSelect) {
                var _input3 = pSelect.querySelector('.p-select__input');
                if (_input3.value === '' || _input3.value === _input3.dataset["default"]) {
                  countInvalid = countInvalid + 1;
                  pFormInput.classList.add('invalid');
                }
              }
            }
          });
        }
        if (!countInvalid) {
          status = true;
        }
        if (status && isValidForm) {
          console.log('Validated!');

          // Main Block
          var _main = form.closest('.main');
          if (_main) {
            var mainForm = _main.querySelector('.main__form');
            form.style.display = 'none';
            mainForm.insertAdjacentElement('afterbegin', thankYouOutput());
          }

          // Modal
          var modalWithThank = form.closest('.modal.modal_with-thank');
          if (modalWithThank) {
            var modalThankContent = modalWithThank.querySelector('.modal_with-thank__content');
            var modalContent = modalWithThank.querySelector('.modal__content');
            modalThankContent.style.display = 'block';
            modalContent.style.display = 'none';
            modalThankContent.insertAdjacentElement('afterbegin', thankYouOutput());
            var close = modalThankContent.querySelector('.thank__close');
            if (close) {
              close.addEventListener('click', function () {
                removeModal(modalWithThank);
                document.body.style.overflow = '';
              });
            }
          }
          lazyContent.update();
          lazyBackground.update();
        }
      });
    });
  }

  // Шаблон верстка Cпасибо
  function thankYouOutput() {
    var element = document.createElement('div');
    element.className = 'thank';
    element.innerHTML = "\n          <div class=\"thank__close\">\n            <picture>\n              <source type=\"image/webp\" srcset=\"#\" data-srcset=\"img/modal/close_thank.webp\">\n              <img class=\"lazy \" width=\"21\" height=\"21\" src=\"#\" data-src=\"img/modal/close_thank.png\" alt=\"\" loading=\"lazy\">\n            </picture>\n          </div>\n          <div class=\"thank__img\">\n                <picture>\n                  <source type=\"image/webp\" srcset=\"#\" data-srcset=\"img/modal/verified.webp\">\n                  <img class=\"lazy\" width=\"84\" height=\"84\" src=\"#\" data-src=\"img/modal/verified.png\" alt=\"\" loading=\"lazy\">\n                </picture>\n          </div>\n          <div class=\"thank__title\">\u0421\u043F\u0430\u0441\u0438\u0431\u043E \u0437\u0430 \u043E\u0442\u043F\u0440\u0430\u0432\u043A\u0443!</div>\n          <div class=\"thank__subtitle\">\u041D\u0430\u0448\u0438 \u044D\u043A\u0441\u043F\u0435\u0440\u0442\u044B \u0441\u0432\u044F\u0436\u0443\u0442\u0441\u044F \u0441 \u0412\u0430\u043C\u0438 \u0432&nbsp;\u0442\u0435\u0447\u0435\u043D\u0438\u0435 2 \u0440\u0430\u0431\u043E\u0447\u0438\u0445 \u0447\u0430\u0441\u043E\u0432.</div>\n        ";
    return element;
  }

  // Сброс event
  function resetEvent(e) {
    e.preventDefault();
    e.stopPropagation();
  }
  // Показываем модальное окно по классу active, передаем элемент
  function addModal(element) {
    element.classList.add("active");
  }
  // Скрываем модальное окно по классу active, передаем элемент
  function removeModal(element) {
    element.classList.remove("active");
  }
  // Всплывающее окно
  var PovlyModal = /*#__PURE__*/function () {
    function PovlyModal() {
      _classCallCheck(this, PovlyModal);
      this.allModals(); // Получаем все элементы и добавляем события
      this.allModalShows(); // Получаем все кнопки с классом modal__show и открывает по клику окно по (data-modal="id"), где id - название модалки. Например modal__test, test - это id
    }
    _createClass(PovlyModal, [{
      key: "allModals",
      value: function allModals() {
        var modals = document.querySelectorAll(".modal");
        modals.forEach(function (modal) {
          function eventClose() {
            var event = new CustomEvent("pModalClose", {
              detail: {
                modal: modal
              }
            });
            document.dispatchEvent(event);
          }
          function remove() {
            removeModal(modal);
            document.body.style.overflow = "";
            eventClose();
          }
          var close = modal.querySelector(".modal__close");
          if (close) {
            close.addEventListener("click", function () {
              remove();
            });
          }
          var back = modal.querySelector(".modal__back");
          if (back) {
            back.addEventListener("click", function () {
              remove();
            });
          }
          modal.addEventListener("click", function (e) {
            if (e.target == modal) {
              remove();
            }
          });
        });
      }
    }, {
      key: "allModalShows",
      value: function allModalShows() {
        var modalShows = document.querySelectorAll(".modal__show");
        modalShows.forEach(function (modal) {
          modal.addEventListener("click", function (e) {
            resetEvent(e);
            var dataModal = modal.getAttribute("data-modal");
            var _modal = document.querySelector(".modal__" + dataModal);
            addModal(_modal);
            document.body.style.overflow = "hidden";
            var event = new CustomEvent("pModalOpen", {
              detail: {
                modal: _modal,
                element: modal
              }
            });
            document.dispatchEvent(event);
          });
        });
      }
    }]);
    return PovlyModal;
  }();
  new PovlyModal();
});